#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 811)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'11,17,195,196,203,287,-130,111,286,112,137,141,11,17,151,139,143,130',
'111,156,251,151,114,-197,134,136,140,142,36,204,48,1,150,12,16,-178',
'23,26,33,150,44,49,3,11,17,18,110,135,138,32,155,145,146,128,129,131',
'132,220,137,141,30,-130,-130,-130,-130,130,10,133,11,17,320,36,220,48',
'1,345,12,16,217,23,26,33,-112,44,49,3,11,17,18,216,82,289,32,405,220',
'150,335,314,315,80,81,139,143,30,279,303,155,279,316,10,134,136,140',
'142,36,333,48,1,304,12,16,342,23,26,33,364,44,49,3,11,17,18,332,135',
'138,32,403,145,146,128,129,131,132,120,137,141,30,11,17,314,315,130',
'10,133,137,141,99,36,326,48,1,130,12,16,-184,23,26,33,379,44,49,3,11',
'17,18,217,380,54,32,358,62,55,92,217,26,240,216,150,49,30,311,220,18',
'54,216,10,32,55,310,220,36,322,48,1,18,12,16,30,23,26,33,217,44,49,3',
'11,17,18,321,68,94,32,216,97,54,253,254,220,55,137,141,355,30,11,17',
'317,130,68,10,279,316,293,30,185,187,191,163,166,62,169,171,176,177',
'181,-123,188,192,54,11,17,18,55,175,178,182,308,62,279,373,339,26,240',
'343,92,49,30,279,316,18,282,165,167,32,279,280,302,36,363,48,1,361,12',
'16,30,23,26,33,296,44,49,3,11,17,18,-185,306,256,32,390,279,280,94,363',
'340,97,361,139,143,30,313,-179,-180,314,315,10,134,136,140,142,36,-178',
'48,1,30,12,16,295,23,26,33,-96,44,49,3,11,17,18,347,135,138,32,387,145',
'146,128,129,131,132,-177,137,141,30,11,17,-129,293,130,10,133,351,292',
'291,36,356,48,1,57,12,16,359,23,26,33,-122,44,49,3,11,17,18,288,360',
'30,32,276,62,92,30,251,26,240,248,231,49,30,11,17,18,368,68,10,32,322',
'112,213,36,372,48,1,211,12,16,30,23,26,33,122,44,49,3,11,17,18,-179',
'94,-182,32,97,62,338,382,-180,26,70,122,122,49,30,11,17,18,-177,-184',
'10,32,378,30,82,36,293,48,1,57,12,16,30,23,26,33,-183,44,49,3,11,17',
'18,391,-181,122,32,401,62,394,-179,120,26,240,395,-180,49,30,-230,117',
'18,397,115,10,32,399,105,400,36,83,48,1,57,12,16,30,23,26,33,56,44,49',
'3,144,406,18,407,,,32,,,139,143,-38,-38,-38,-38,,,30,134,136,140,142',
',10,145,146,128,129,,,,137,141,-40,-40,-40,-40,,130,,133,135,138,143',
',145,146,128,129,131,132,134,137,141,247,89,90,91,87,130,,133,,139,143',
'89,90,91,87,,,,134,136,140,142,,,145,146,128,129,131,132,,137,141,-44',
'-44,-44,-44,,130,,133,135,138,,,145,146,128,129,131,132,,137,141,214',
',,,,130,,133,,139,143,,,,,,,,134,136,140,142,,,145,146,128,129,,11,17',
'137,141,68,,72,,,130,,133,135,138,,,145,146,128,129,131,132,63,137,141',
'11,17,,,68,130,72,133,62,,,,26,70,,,49,,,,18,64,63,,32,11,17,77,,68',
',72,,62,,30,,26,70,,,49,,,,18,64,63,,32,11,17,77,,68,,72,,62,,30,,26',
'70,,,49,,,,18,64,63,,32,11,17,77,,68,,72,,62,,30,,26,70,,,49,,,,18,64',
'63,,32,11,17,77,,68,,72,,62,,30,,26,70,,,49,,,,18,64,63,,32,11,17,77',
',68,,72,,62,,30,,26,70,,,49,,,,18,64,63,,32,11,17,77,,68,,72,,62,,30',
',26,70,,,49,,,,18,64,63,284,32,11,17,77,,68,,72,,62,,30,,26,70,,,49',
',,,18,64,63,,32,11,17,77,,68,,72,,62,,30,,26,70,,,49,,,,18,64,63,,32',
'11,17,77,,68,,72,,62,,30,,26,70,,,49,,,,18,64,63,,32,11,17,77,,68,,72',
',62,,30,,26,70,,,49,,,,18,64,63,,32,11,17,77,,68,,72,,62,,30,,26,70',
',,49,,,,18,64,63,,32,11,17,77,,68,149,72,,62,,30,,26,70,,,49,,,,18,64',
'63,,32,11,17,77,,68,,72,,62,,30,,26,70,,,49,,,,18,64,63,,32,11,17,77',
',68,,72,,62,,30,,26,70,,,49,,,,18,64,63,,32,11,17,77,,68,,72,,62,,30',
',26,70,,,49,,,,18,64,63,,32,11,17,77,,68,,72,,62,,30,,26,70,,,49,,,',
'18,64,63,,32,11,17,77,,68,,72,,62,,30,,26,70,,,49,,,,18,64,63,,32,11',
'17,77,,68,,72,,62,,30,,26,70,,,49,,,,18,64,63,,32,11,17,77,,68,,72,',
'62,,30,,26,70,,,49,,,,18,64,63,,32,11,17,77,,68,,72,,62,,30,,26,70,',
',49,,,,18,64,63,,32,11,17,77,,68,,72,,62,,30,,26,70,,,49,,,,18,64,63',
',32,11,17,77,,68,,72,,62,,30,,26,70,,,49,,,,18,64,63,,32,11,17,77,,68',
',72,,62,,30,,26,70,,,49,,,,18,64,63,,32,11,17,77,,68,,11,17,62,,30,',
'26,70,,,49,,,,18,64,,,32,,,77,,,11,17,,62,,30,,26,70,62,,49,,26,240',
'18,,49,,32,,18,,,,32,,,,,30,,,62,54,,30,26,201,,44,49,11,17,,18,68,',
'72,32,,,11,17,145,146,128,129,131,132,30,137,141,,63,,11,17,130,,133',
',128,129,,62,,137,141,26,70,,,49,130,62,133,18,64,26,240,32,,49,77,',
',18,,62,54,32,30,26,201,,44,49,,,,18,30,11,17,32,,68,,72,,,,11,17,,30',
'68,,72,,,,11,17,63,210,68,149,72,,,,,,63,62,,,,26,70,,,49,63,62,,18',
'64,26,70,32,,49,77,62,,18,64,26,70,32,30,49,77,,,18,64,11,17,32,30,68',
'77,72,,,,11,17,,30,68,,72,,,,11,17,63,,68,,72,,,,,,63,62,,,,26,70,,',
'49,63,62,,18,64,26,70,32,,49,77,62,,18,64,26,70,32,30,49,77,,,18,64',
'11,17,32,30,68,77,72,,,,11,17,,30,68,,72,,,,11,17,63,,68,,72,,,,,,63',
'62,,,,26,70,,,49,63,62,,18,64,26,70,32,,49,77,62,,18,64,26,70,32,30',
'49,77,,,18,64,11,17,32,30,68,77,72,,,,11,17,,30,68,,72,,,,11,17,63,',
'68,,72,,,,11,17,63,62,,,242,26,70,,,49,63,62,,18,64,26,70,32,,49,77',
'62,,18,64,26,70,32,30,49,77,62,,18,64,26,240,32,30,49,77,,,18,,11,17',
'32,30,104,,-197,,,,11,17,,30,68,,72,,,,11,17,101,,68,,72,,,,11,17,63',
'62,68,,72,26,70,,,49,63,62,,18,,26,70,32,,49,63,62,,18,64,26,70,32,30',
'49,77,62,,18,64,26,70,32,30,49,77,,,18,64,11,17,32,30,68,77,72,,,,11',
'17,,30,68,,72,,,,,,63,,,,,,,,128,129,63,62,,137,141,26,70,,,49,130,62',
'133,18,64,26,70,32,,49,77,,,18,64,139,143,32,30,,77,,,,134,136,140,142',
'30,,,,,,,,139,143,,,,,,,,134,136,140,142,,,145,146,128,129,131,132,',
'137,141,,,,,,130,,133,135,138,,,145,146,128,129,131,132,,137,141,139',
'143,,,,130,,133,,134,136,140,142,,,,,139,143,,,,,,,,134,136,140,142',
',,135,138,,,145,146,128,129,131,132,,137,141,,,,,,130,,133,145,146,128',
'129,131,132,,137,141,139,143,,,,130,,133,257,134,136,140,142,145,146',
'128,129,131,132,,137,141,,,,,,130,,133,,,135,138,,,145,146,128,129,131',
'132,,137,141,139,143,,,,130,,133,,134,136,140,142,,,,,,139,143,,,,,',
',,134,136,140,142,,135,138,,,145,146,128,129,131,132,,137,141,,,,,,130',
'138,133,,145,146,128,129,131,132,,137,141,139,143,,,,130,,133,,134,136',
'140,142,,,,,,,,,,,143,,,,,,,,134,135,138,,,145,146,128,129,131,132,',
'137,141,139,143,,,,130,,133,,134,136,140,142,145,146,128,129,131,132',
',137,141,,143,,,,130,,133,,134,135,138,,,145,146,128,129,131,132,,137',
'141,139,143,,,,130,,133,,134,136,140,142,145,146,128,129,131,132,,137',
'141,,,,,,130,,133,,,135,138,,,145,146,128,129,131,132,,137,141,139,143',
',,,130,,133,,134,136,140,142,,,,,139,143,,,,,,,,134,136,140,142,,,135',
'138,,,145,146,128,129,131,132,,137,141,,,,,,130,,133,145,146,128,129',
'131,132,,137,141,139,143,,,,130,,133,,134,136,140,142,,,,,,,,,,,143',
',,,,,,,134,135,138,,,145,146,128,129,131,132,,137,141,139,143,,,,130',
',133,,134,136,140,142,145,146,128,129,131,132,,137,141,,,,,,130,,133',
',,135,138,,,145,146,128,129,131,132,,137,141,,,,,,130,,133,185,187,191',
'163,166,,169,171,176,227,228,,188,230,,,,,,175,178,229,185,187,191,163',
'166,,169,171,176,227,228,,188,230,,165,167,,,175,178,229,185,187,191',
'163,166,,169,171,176,227,234,,188,230,,165,167,,,175,178,229,185,187',
'191,163,166,,169,171,176,227,234,,188,230,,165,167,,,175,178,229,185',
'187,191,163,166,,169,171,176,227,228,,188,230,,165,167,,,175,178,229',
'185,187,191,163,166,,169,171,176,227,234,,188,230,,165,167,,,175,178',
'229,,,,,,,,,,,,,,,,165,167' ]
        racc_action_table = arr = ::Array.new(2513, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,86,86,95,152,306,38,152,38,259,259,72,72,70,86,86,259,74,72,333',
'201,38,201,86,86,86,86,0,95,0,0,70,0,0,74,0,0,0,201,0,0,0,41,41,0,38',
'86,86,0,72,86,86,86,86,86,86,254,86,86,0,306,306,306,306,86,0,86,286',
'286,232,41,253,41,41,286,41,41,217,41,41,41,181,41,41,41,399,399,41',
'217,12,161,41,399,217,181,251,232,232,12,12,161,161,41,209,209,286,283',
'283,41,161,161,161,161,399,250,399,399,209,399,399,283,399,399,399,309',
'399,399,399,394,394,399,249,161,161,399,394,161,161,161,161,161,161',
'248,161,161,399,379,379,309,309,161,399,161,258,258,27,394,244,394,394',
'258,394,394,27,394,394,394,329,394,394,394,302,302,394,114,329,1,394',
'302,379,1,203,312,379,379,114,240,379,394,219,114,379,37,312,394,379',
'37,219,312,302,235,302,302,37,302,302,379,302,302,302,110,302,302,302',
'83,83,302,234,83,203,302,110,203,296,123,123,110,296,263,263,296,302',
'291,291,225,263,291,302,225,225,226,203,83,83,83,83,83,83,83,83,83,83',
'83,210,83,83,16,214,214,83,16,83,83,83,214,291,325,325,274,291,291,285',
'23,291,83,285,285,291,147,83,83,291,147,147,205,214,360,214,214,360',
'214,214,291,214,214,214,193,214,214,214,356,356,214,192,212,125,214',
'356,212,212,23,308,280,23,308,125,125,214,224,190,186,224,224,214,125',
'125,125,125,356,184,356,356,23,356,356,183,356,356,356,182,356,356,356',
'338,338,356,290,125,125,356,338,125,125,125,125,125,125,180,125,125',
'356,374,374,177,174,125,356,125,294,173,168,338,297,338,338,164,338',
'338,303,338,338,338,304,338,338,338,144,144,338,154,307,141,338,144',
'374,204,137,122,374,374,121,113,374,338,211,211,374,318,211,338,374',
'319,109,105,144,323,144,144,102,144,144,374,144,144,144,84,144,144,144',
'275,275,144,79,204,76,144,204,211,255,334,75,211,211,336,337,211,144',
'327,327,211,71,69,144,211,327,204,62,275,349,275,275,61,275,275,211',
'275,275,275,60,275,275,275,389,389,275,357,58,53,275,389,327,363,50',
'48,327,327,369,45,327,275,373,43,327,375,39,275,327,380,35,386,389,13',
'389,389,7,389,389,327,389,389,389,3,389,389,389,67,402,389,404,,,389',
',,67,67,9,9,9,9,,,389,67,67,67,67,,389,261,261,261,261,,,,261,261,20',
'20,20,20,,261,,261,67,67,270,,67,67,67,67,67,67,270,67,67,118,21,21',
'21,21,67,,67,,118,118,28,28,28,28,,,,118,118,118,118,,,270,270,270,270',
'270,270,,270,270,25,25,25,25,,270,,270,118,118,,,118,118,118,118,118',
'118,,118,118,107,,,,,118,,118,,107,107,,,,,,,,107,107,107,107,,,262',
'262,262,262,,135,135,262,262,135,,135,,,262,,262,107,107,,,107,107,107',
'107,107,107,135,107,107,295,295,,,295,107,295,107,135,,,,135,135,,,135',
',,,135,135,295,,135,195,195,135,,195,,195,,295,,135,,295,295,,,295,',
',,295,295,195,,295,44,44,295,,44,,44,,195,,295,,195,195,,,195,,,,195',
'195,44,,195,151,151,195,,151,,151,,44,,195,,44,44,,,44,,,,44,44,151',
',44,361,361,44,,361,,361,,151,,44,,151,151,,,151,,,,151,151,361,,151',
'57,57,151,,57,,57,,361,,151,,361,361,,,361,,,,361,361,57,,361,150,150',
'361,,150,,150,,57,,361,,57,57,,,57,,,,57,57,150,150,57,146,146,57,,146',
',146,,150,,57,,150,150,,,150,,,,150,150,146,,150,145,145,150,,145,,145',
',146,,150,,146,146,,,146,,,,146,146,145,,146,63,63,146,,63,,63,,145',
',146,,145,145,,,145,,,,145,145,63,,145,64,64,145,,64,,64,,63,,145,,63',
'63,,,63,,,,63,63,64,,63,281,281,63,,281,,281,,64,,63,,64,64,,,64,,,',
'64,64,281,,64,68,68,64,,68,68,68,,281,,64,,281,281,,,281,,,,281,281',
'68,,281,17,17,281,,17,,17,,68,,281,,68,68,,,68,,,,68,68,17,,68,143,143',
'68,,143,,143,,17,,68,,17,17,,,17,,,,17,17,143,,17,142,142,17,,142,,142',
',143,,17,,143,143,,,143,,,,143,143,142,,143,140,140,143,,140,,140,,142',
',143,,142,142,,,142,,,,142,142,140,,142,335,335,142,,335,,335,,140,',
'142,,140,140,,,140,,,,140,140,335,,140,139,139,140,,139,,139,,335,,140',
',335,335,,,335,,,,335,335,139,,335,77,77,335,,77,,77,,139,,335,,139',
'139,,,139,,,,139,139,77,,139,80,80,139,,80,,80,,77,,139,,77,77,,,77',
',,,77,77,80,,77,81,81,77,,81,,81,,80,,77,,80,80,,,80,,,,80,80,81,,80',
'82,82,80,,82,,82,,81,,80,,81,81,,,81,,,,81,81,82,,81,10,10,81,,10,,10',
',82,,81,,82,82,,,82,,,,82,82,10,,82,326,326,82,,326,,242,242,10,,82',
',10,10,,,10,,,,10,10,,,10,,,10,,,88,88,,326,,10,,326,326,242,,326,,242',
'242,326,,242,,326,,242,,,,242,,,,,326,,,88,88,,242,88,88,,88,88,138',
'138,,88,138,,138,88,,,247,247,273,273,273,273,273,273,88,273,273,,138',
',100,100,273,,273,,277,277,,138,,277,277,138,138,,,138,277,247,277,138',
'138,247,247,138,,247,138,,,247,,100,100,247,138,100,100,,100,100,,,',
'100,247,101,101,100,,101,,101,,,,136,136,,100,136,,136,,,,104,104,101',
'101,104,104,104,,,,,,136,101,,,,101,101,,,101,104,136,,101,101,136,136',
'101,,136,101,104,,136,136,104,104,136,101,104,136,,,104,104,36,36,104',
'136,36,104,36,,,,128,128,,104,128,,128,,,,321,321,36,,321,,321,,,,,',
'128,36,,,,36,36,,,36,321,128,,36,36,128,128,36,,128,36,321,,128,128',
'321,321,128,36,321,128,,,321,321,134,134,321,128,134,321,134,,,,111',
'111,,321,111,,111,,,,133,133,134,,133,,133,,,,,,111,134,,,,134,134,',
',134,133,111,,134,134,111,111,134,,111,134,133,,111,111,133,133,111',
'134,133,111,,,133,133,132,132,133,111,132,133,132,,,,131,131,,133,131',
',131,,,,130,130,132,,130,,130,,,,117,117,131,132,,,117,132,132,,,132',
'130,131,,132,132,131,131,132,,131,132,130,,131,131,130,130,131,132,130',
'131,117,,130,130,117,117,130,131,117,130,,,117,,33,33,117,130,33,,33',
',,,311,311,,117,311,,311,,,,310,310,33,,310,,310,,,,129,129,311,33,129',
',129,33,33,,,33,310,311,,33,,311,311,33,,311,129,310,,311,311,310,310',
'311,33,310,311,129,,310,310,129,129,310,311,129,310,,,129,129,99,99',
'129,310,99,129,99,,,,288,288,,129,288,,288,,,,,,99,,,,,,,,278,278,288',
'99,,278,278,99,99,,,99,278,288,278,99,99,288,288,99,,288,99,,,288,288',
'365,365,288,99,,288,,,,365,365,365,365,288,,,,,,,,160,160,,,,,,,,160',
'160,160,160,,,365,365,365,365,365,365,,365,365,,,,,,365,,365,160,160',
',,160,160,160,160,160,160,,160,160,159,159,,,,160,,160,,159,159,159',
'159,,,,,268,268,,,,,,,,268,268,268,268,,,159,159,,,159,159,159,159,159',
'159,,159,159,,,,,,159,,159,268,268,268,268,268,268,,268,268,126,126',
',,,268,,268,126,126,126,126,126,264,264,264,264,264,264,,264,264,,,',
',,264,,264,,,126,126,,,126,126,126,126,126,126,,126,126,370,370,,,,126',
',126,,370,370,370,370,,,,,,265,265,,,,,,,,265,265,265,265,,370,370,',
',370,370,370,370,370,370,,370,370,,,,,,370,265,370,,265,265,265,265',
'265,265,,265,265,148,148,,,,265,,265,,148,148,148,148,,,,,,,,,,,266',
',,,,,,,266,148,148,,,148,148,148,148,148,148,,148,148,352,352,,,,148',
',148,,352,352,352,352,266,266,266,266,266,266,,266,266,,269,,,,266,',
'266,,269,352,352,,,352,352,352,352,352,352,,352,352,346,346,,,,352,',
'352,,346,346,346,346,269,269,269,269,269,269,,269,269,,,,,,269,,269',
',,346,346,,,346,346,346,346,346,346,,346,346,207,207,,,,346,,346,,207',
'207,207,207,,,,,366,366,,,,,,,,366,366,366,366,,,207,207,,,207,207,207',
'207,207,207,,207,207,,,,,,207,,207,366,366,366,366,366,366,,366,366',
'341,341,,,,366,,366,,341,341,341,341,,,,,,,,,,,272,,,,,,,,272,341,341',
',,341,341,341,341,341,341,,341,341,383,383,,,,341,,341,,383,383,383',
'383,272,272,272,272,272,272,,272,272,,,,,,272,,272,,,383,383,,,383,383',
'383,383,383,383,,383,383,,,,,,383,,383,292,292,292,292,292,,292,292',
'292,292,292,,292,292,,,,,,292,292,292,293,293,293,293,293,,293,293,293',
'293,293,,293,293,,292,292,,,293,293,293,322,322,322,322,322,,322,322',
'322,322,322,,322,322,,293,293,,,322,322,322,231,231,231,231,231,,231',
'231,231,231,231,,231,231,,322,322,,,231,231,231,112,112,112,112,112',
',112,112,112,112,112,,112,112,,231,231,,,112,112,112,115,115,115,115',
'115,,115,115,115,115,115,,115,115,,112,112,,,115,115,115,,,,,,,,,,,',
',,,,115,115' ]
        racc_action_check = arr = ::Array.new(2513, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   141,   nil,   468,   nil,   nil,   nil,   499,   nil,   464,
  1251,   nil,    84,   494,   nil,   nil,   221,  1001,   nil,   nil,
   486,   508,   nil,   271,   nil,   540,   nil,   141,   518,   nil,
   nil,   nil,   nil,  1697,   nil,   499,  1486,   157,     1,   487,
   nil,    41,   nil,   469,   726,   465,   nil,   nil,   482,   nil,
   460,   nil,   nil,   454,   nil,   nil,   nil,   801,   454,   nil,
   446,   456,   451,   901,   926,   nil,   nil,   508,   976,   429,
     8,   428,    10,   nil,    12,   418,   412,  1151,   nil,   410,
  1176,  1201,  1226,   213,   402,   nil,    -2,   nil,  1306,   nil,
   nil,   nil,   nil,   nil,   nil,    -8,   nil,   nil,   nil,  1774,
  1372,  1419,   407,   nil,  1439,   414,   nil,   616,   nil,   405,
   187,  1563,  2422,   394,   151,  2444,   nil,  1650,   562,   nil,
   nil,   389,   363,   155,   nil,   299,  1944,   nil,  1496,  1727,
  1640,  1630,  1620,  1573,  1553,   651,  1429,   335,  1348,  1126,
  1076,   330,  1051,  1026,   385,   876,   851,   272,  2052,   nil,
   826,   751,    -4,   nil,   379,   nil,   nil,   nil,   nil,  1882,
  1837,    84,   nil,   nil,   370,   nil,   nil,   nil,   330,   nil,
   nil,   nil,   nil,   350,   353,   nil,   nil,   341,   nil,   nil,
   335,    71,   317,   325,   307,   nil,   298,   nil,   nil,   nil,
   297,   nil,   281,   260,   nil,   701,   nil,   nil,   nil,   nil,
   nil,    15,   nil,   180,   394,   277,   nil,  2187,   nil,    93,
   231,   403,   298,   nil,   256,   nil,   nil,    54,   nil,   172,
   nil,   nil,   nil,   nil,   273,   228,   229,   nil,   nil,   nil,
   nil,  2400,    48,   nil,   166,   189,   nil,   nil,   nil,   nil,
   163,   nil,  1282,   nil,   147,   nil,   nil,  1358,   141,   107,
   103,    81,   nil,    32,    17,   431,   nil,   nil,    94,   -50,
   nil,   487,   595,   169,  1921,  2007,  2074,   nil,  1899,  2119,
   541,   nil,  2271,  1309,   260,   428,   nil,  1325,  1751,   nil,
   306,   951,   nil,    96,   nil,   265,    66,   nil,  1784,   nil,
   338,   231,  2334,  2356,   360,   676,   188,   365,   nil,   nil,
   nil,   nil,   170,   354,   360,   nil,    -2,   382,   281,   100,
  1717,  1707,   159,   nil,   nil,   nil,   nil,   nil,   399,   400,
   nil,  1506,  2378,   407,   nil,   256,  1276,   446,   nil,   156,
   nil,   nil,   nil,   -15,   415,  1101,   420,   421,   342,   nil,
   nil,  2249,   nil,   nil,   nil,   nil,  2142,   nil,   nil,   447,
   nil,   nil,  2097,   nil,   nil,   nil,   299,   467,   nil,   nil,
   256,   776,   nil,   474,   nil,  1816,  2204,   nil,   nil,   478,
  1989,   nil,   nil,   482,   360,   485,   nil,   nil,   nil,   145,
   490,   nil,   nil,  2294,   nil,   nil,   491,   nil,   nil,   471,
   nil,   nil,   nil,   nil,   127,   nil,   nil,   nil,   nil,    84,
   nil,   nil,   508,   nil,   510,   nil,   nil,   nil ]

racc_action_default = [
  -206,  -243,  -181,   -74,   -43,   -16,  -183,   -45,   -17,    -6,
  -243,  -124,  -223,  -243,   -18,    -7,  -198,  -243,   -98,   -19,
    -8,   -20,    -9,  -243,  -186,   -10,  -129,  -241,  -243,   -11,
  -231,  -177,   -96,   -97,   -12,  -243,  -243,  -243,  -178,   -39,
   -13,    -1,  -182,  -243,  -243,   -41,   -14,    -2,  -243,  -185,
   -42,   -15,    -3,  -206,  -198,  -197,   -75,  -243,   -67,   -62,
   -68,   -65,  -223,  -243,  -243,  -142,  -141,  -243,  -243,  -241,
   -97,   -59,  -243,   -66,   -60,   -63,   -61,  -243,   -64,   -58,
  -243,  -243,  -243,  -109,  -206,  -125,  -243,   -49,  -243,   -46,
   -47,   -48,  -203,  -205,  -202,  -206,  -199,  -204,  -201,  -243,
  -243,  -243,   -53,   -54,  -243,  -243,  -134,  -243,   -73,  -243,
  -206,  -243,  -109,   -77,  -206,  -119,    -4,  -243,  -243,  -188,
  -187,  -190,  -207,  -243,  -208,  -243,  -243,  -160,  -243,  -243,
  -243,  -243,  -243,  -243,  -243,  -243,  -243,  -243,  -243,  -243,
  -243,  -243,  -243,  -243,  -243,  -243,  -243,  -243,   -56,  -226,
  -243,  -243,  -243,  -235,  -243,  -238,  -234,  -239,  -153,  -106,
  -108,  -243,  -102,   -25,  -105,   -29,   -27,   -35,   -94,   -23,
   -92,   -31,  -113,  -243,  -229,   -33,   -32,  -114,   -21,  -110,
  -100,   -97,   -34,  -243,  -101,   -28,  -103,   -26,   -22,  -104,
   -99,   -30,   -24,  -206,  -126,  -243,  -127,   -38,   -40,   -44,
   -37,   -97,   -39,  -243,  -243,  -243,  -217,  -107,   -36,  -243,
   -52,  -243,  -243,   408,  -243,   -81,  -223,  -206,   -83,  -243,
   -97,   -90,   -89,   -80,  -243,  -243,  -229,  -114,  -112,   -34,
   -24,  -119,  -243,  -117,  -112,  -229,  -118,  -120,  -172,  -184,
   -97,  -178,  -243,  -180,  -243,  -179,  -171,  -243,  -243,  -243,
  -229,  -214,  -211,  -243,  -243,  -243,  -242,  -163,  -149,  -148,
  -143,  -151,  -152,  -150,  -155,  -162,  -157,  -144,  -161,  -159,
  -156,  -145,  -158,  -154,  -243,    -5,  -133,  -146,  -147,  -227,
  -228,  -243,  -224,  -243,  -123,  -243,  -243,  -232,  -243,  -240,
  -243,   -95,  -109,  -230,  -243,  -243,  -243,  -243,  -219,  -128,
  -200,  -218,  -243,  -228,   -50,   -55,  -224,  -243,  -137,  -243,
  -243,  -243,  -243,   -78,   -86,   -85,  -228,  -131,  -243,  -229,
   -79,  -243,  -230,  -243,  -174,  -229,  -243,  -243,  -165,  -243,
  -169,  -189,  -209,  -230,  -243,  -243,  -206,  -206,  -243,  -132,
  -225,   -57,  -122,  -130,  -236,  -233,  -237,   -69,   -93,  -229,
  -111,   -70,  -115,  -221,  -220,  -222,  -243,  -243,  -196,   -51,
  -137,  -243,  -136,  -243,   -84,   -87,   -88,   -82,   -71,  -243,
  -116,  -121,   -72,  -228,  -243,  -243,  -176,  -166,  -164,  -243,
  -243,  -212,  -210,  -213,  -215,  -216,  -243,  -192,   -91,  -243,
  -194,  -195,  -135,  -138,  -243,   -76,  -175,  -173,  -170,  -243,
  -191,  -193,  -243,  -140,  -243,  -168,  -139,  -167 ]

racc_goto_table = [
    38,    42,    31,     2,     6,    41,   116,   103,   106,   238,
   274,   119,    53,    47,   153,   123,   233,    93,   252,    96,
   362,   294,   174,    85,   189,   244,   170,    84,   147,   328,
   108,   224,    88,   235,   113,   232,   198,   109,   200,   100,
   199,    38,    42,    31,     2,     6,   193,   327,   198,   371,
   208,   226,   199,   367,   246,   194,   325,   290,   121,   168,
   255,   209,   297,    95,   212,   205,   374,   301,   249,   250,
   102,   225,   392,   318,   354,   152,    35,   nil,   nil,   nil,
   307,   197,   323,   184,    42,   180,     2,     6,    38,    42,
    31,     2,     6,   197,   nil,   nil,   nil,   334,   nil,   nil,
    38,    42,    31,     2,     6,   nil,   nil,   nil,   206,   377,
   283,   285,   221,   nil,   nil,   nil,   221,   241,    42,    31,
     2,     6,   nil,   223,   nil,   nil,   nil,   223,   nil,   nil,
   nil,   267,   233,   nil,   324,   271,    39,     7,   309,     4,
   nil,   nil,   nil,   nil,    38,    42,    31,     2,     6,   319,
   244,   nil,   nil,   nil,   nil,   330,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   369,   nil,   357,   nil,
   nil,    27,   375,   nil,   nil,   nil,   nil,    39,     7,   nil,
     4,   nil,   nil,   nil,   nil,   305,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   350,   nil,   388,    93,    93,   300,
   nil,   299,   nil,   nil,   386,   nil,   298,   nil,   nil,   nil,
   nil,   331,    27,   nil,    38,    42,    31,     2,     6,   221,
   164,   nil,   162,   233,   202,     7,   nil,     4,   344,   381,
   223,   349,   189,   nil,   348,   330,   202,     7,   nil,     4,
   116,   nil,   241,    42,    31,     2,     6,   241,    42,    31,
     2,     6,   nil,   nil,   nil,   336,   337,   nil,   nil,   nil,
   402,   nil,   nil,   nil,   nil,   404,   396,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    38,    42,    31,     2,     6,
    39,     7,   244,     4,   nil,   nil,   nil,   398,   239,   nil,
   nil,   184,    42,   180,     2,     6,   nil,   nil,   384,   385,
   376,   nil,    38,    42,    31,     2,     6,   353,   nil,   nil,
   nil,   nil,   nil,   nil,   221,    27,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   241,    42,    31,
     2,     6,    50,   393,   nil,   nil,   nil,   nil,    38,    42,
    31,     2,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    39,     7,   nil,     4,   116,   nil,    38,    42,    31,     2,
     6,   389,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
   nil,   nil,   nil,    50,   241,    42,    31,     2,     6,   241,
    42,    31,     2,     6,   nil,    27,   nil,   nil,   nil,    38,
    42,    31,     2,     6,    38,    42,    31,     2,     6,    38,
    42,    31,     2,     6,   157,   nil,   nil,   nil,   nil,   nil,
    45,    39,     7,   239,     4,   190,   nil,   nil,   239,   nil,
    50,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   164,   nil,
   162,   nil,    50,   nil,   nil,   nil,   nil,   nil,    39,     7,
   nil,     4,   nil,   nil,   nil,   nil,    27,   nil,   nil,   245,
   nil,   nil,   186,   nil,   nil,   nil,   nil,    45,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
   nil,   nil,   nil,    27,    39,     7,    50,     4,   nil,   222,
   nil,   nil,   nil,   222,   nil,   nil,   243,   nil,   nil,   nil,
   nil,   nil,    39,     7,   nil,     4,   nil,   nil,   239,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,
   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,     7,    27,     4,   nil,
    39,     7,   nil,     4,   nil,    39,     7,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   239,    50,   nil,   nil,   nil,
   239,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    27,   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,
    27,   nil,   nil,   nil,   245,   nil,   nil,   nil,   nil,   245,
   nil,   nil,   nil,    45,   nil,   nil,   222,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,
   nil,   243,   nil,   nil,   nil,   nil,   243,   nil,   157,   nil,
   nil,   nil,   nil,   190,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   245,
   186,   nil,   nil,   nil,   nil,    67,   nil,   nil,   nil,   nil,
    50,    45,    86,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   222,   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,
   nil,   107,   nil,   nil,   nil,   nil,   243,   nil,   nil,   118,
   nil,   nil,   nil,   nil,   nil,   nil,   245,    45,   nil,   nil,
   nil,   245,   125,   nil,   nil,   nil,   nil,   nil,   126,   127,
   nil,    50,   nil,   nil,   nil,    45,    50,   nil,   nil,   nil,
   nil,    50,   158,   nil,   nil,   159,   160,   161,   nil,   nil,
   nil,   nil,   nil,   243,   nil,   nil,   nil,   nil,   243,   nil,
   nil,   nil,   nil,   nil,   207,   nil,   nil,   nil,    45,   nil,
   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,    45,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   258,   259,   260,   261,   262,   263,   264,
   265,   266,   nil,   268,   269,   270,   nil,   272,   273,   nil,
   277,   278,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    86,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   341,   nil,   nil,   nil,
   nil,   nil,   nil,   346,   nil,   nil,   nil,   nil,   nil,   nil,
   352,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   365,   366,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   370,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   383,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   107 ]

racc_goto_check = [
    35,    36,    34,    38,    39,     2,     4,    31,    62,    71,
     5,    73,    40,     3,    87,    75,    56,    65,    84,    80,
    63,    44,    43,    60,    37,    69,    53,    40,    29,    67,
     6,    48,    23,    45,    47,    48,     8,    35,    22,    23,
    10,    35,    36,    34,    38,    39,    75,    66,     8,    59,
    22,    43,    10,    49,    70,    61,    72,    42,    74,    41,
    76,    29,    77,    78,    29,    79,    33,    81,    82,    83,
    30,    29,    63,    44,    85,    86,     1,   nil,   nil,   nil,
     5,     6,    44,    35,    36,    34,    38,    39,    35,    36,
    34,    38,    39,     6,   nil,   nil,   nil,    44,   nil,   nil,
    35,    36,    34,    38,    39,   nil,   nil,   nil,     3,    67,
    29,    29,    34,   nil,   nil,   nil,    34,    35,    36,    34,
    38,    39,   nil,     3,   nil,   nil,   nil,     3,   nil,   nil,
   nil,    65,    56,   nil,    71,    65,    24,    28,    48,    27,
   nil,   nil,   nil,   nil,    35,    36,    34,    38,    39,    45,
    69,   nil,   nil,   nil,   nil,    69,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,     5,   nil,
   nil,    55,    44,   nil,   nil,   nil,   nil,    24,    28,   nil,
    27,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    56,   nil,    44,    65,    65,    80,
   nil,    60,   nil,   nil,     5,   nil,     3,   nil,   nil,   nil,
   nil,    73,    55,   nil,    35,    36,    34,    38,    39,    34,
    28,   nil,    27,    56,    24,    28,   nil,    27,    87,    84,
     3,    43,    37,   nil,    53,    69,    24,    28,   nil,    27,
     4,   nil,    35,    36,    34,    38,    39,    35,    36,    34,
    38,    39,   nil,   nil,   nil,    34,    34,   nil,   nil,   nil,
     5,   nil,   nil,   nil,   nil,     5,    71,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    35,    36,    34,    38,    39,
    24,    28,    69,    27,   nil,   nil,   nil,    69,    55,   nil,
   nil,    35,    36,    34,    38,    39,   nil,   nil,    75,    75,
    31,   nil,    35,    36,    34,    38,    39,    40,   nil,   nil,
   nil,   nil,   nil,   nil,    34,    55,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,    36,    34,
    38,    39,    26,    62,   nil,   nil,   nil,   nil,    35,    36,
    34,    38,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    24,    28,   nil,    27,     4,   nil,    35,    36,    34,    38,
    39,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,    26,    35,    36,    34,    38,    39,    35,
    36,    34,    38,    39,   nil,    55,   nil,   nil,   nil,    35,
    36,    34,    38,    39,    35,    36,    34,    38,    39,    35,
    36,    34,    38,    39,    26,   nil,   nil,   nil,   nil,   nil,
    25,    24,    28,    55,    27,    26,   nil,   nil,    55,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,   nil,
    27,   nil,    26,   nil,   nil,   nil,   nil,   nil,    24,    28,
   nil,    27,   nil,   nil,   nil,   nil,    55,   nil,   nil,    26,
   nil,   nil,    25,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,    55,    24,    28,    26,    27,   nil,    25,
   nil,   nil,   nil,    25,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,    24,    28,   nil,    27,   nil,   nil,    55,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    24,    28,    55,    27,   nil,
    24,    28,   nil,    27,   nil,    24,    28,   nil,    27,   nil,
   nil,   nil,   nil,   nil,   nil,    55,    26,   nil,   nil,   nil,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    55,   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,
    55,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,    25,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,    25,   nil,    26,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,
    25,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
    26,    25,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,
   nil,    32,   nil,   nil,   nil,   nil,    25,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,    26,    25,   nil,   nil,
   nil,    26,    32,   nil,   nil,   nil,   nil,   nil,    32,    32,
   nil,    26,   nil,   nil,   nil,    25,    26,   nil,   nil,   nil,
   nil,    26,    32,   nil,   nil,    32,    32,    32,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,    32,    32,    32,    32,    32,    32,
    32,    32,   nil,    32,    32,    32,   nil,    32,    32,   nil,
    32,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    32 ]

racc_goto_pointer = [
   nil,    76,     5,    13,   -35,  -134,    -7,   nil,   -52,   nil,
   -48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -50,    11,   136,   369,   332,   139,   137,   -40,
    37,   -26,   655,  -259,     2,     0,     1,   -59,     3,     4,
    11,   -24,  -111,   -61,  -153,   -82,   nil,    -4,   -79,  -259,
   nil,   nil,   nil,   -57,   nil,   171,   -99,   nil,   nil,  -273,
     6,   -31,   -28,  -288,   nil,    -6,  -200,  -218,   nil,   -92,
   -63,  -108,  -186,   -37,    10,   -38,   -63,  -131,    40,   -30,
    -4,  -137,   -54,   -53,  -104,  -222,     3,   -58,   nil ]

racc_goto_default = [
   nil,   nil,   275,   124,    52,   nil,     9,    15,    20,    22,
    25,    29,    34,    40,    46,    51,     5,     8,    14,    19,
    21,   172,    28,   nil,    73,    75,    79,    59,    61,   nil,
   nil,    66,   148,   281,    71,    74,    76,    78,    58,    60,
    13,   nil,   nil,   nil,   nil,   nil,    37,   nil,   nil,   215,
   312,   218,   219,   nil,   173,    69,   179,   183,   236,   237,
   nil,   nil,   nil,   nil,    65,    24,   nil,   nil,   329,    43,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    98,   nil,   nil,   nil,   nil,   nil,   nil,   154 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 74, :_reduce_3,
  2, 74, :_reduce_4,
  1, 77, :_reduce_5,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  3, 92, :_reduce_36,
  3, 92, :_reduce_37,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  4, 86, :_reduce_50,
  5, 86, :_reduce_51,
  3, 86, :_reduce_52,
  2, 86, :_reduce_53,
  1, 102, :_reduce_54,
  3, 102, :_reduce_55,
  1, 101, :_reduce_56,
  3, 101, :_reduce_57,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  5, 78, :_reduce_69,
  5, 78, :_reduce_70,
  5, 78, :_reduce_71,
  5, 90, :_reduce_72,
  2, 79, :_reduce_73,
  1, 118, :_reduce_74,
  2, 118, :_reduce_75,
  6, 80, :_reduce_76,
  2, 80, :_reduce_77,
  3, 119, :_reduce_78,
  3, 119, :_reduce_79,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  3, 120, :_reduce_82,
  1, 121, :_reduce_none,
  3, 121, :_reduce_84,
  1, 122, :_reduce_85,
  1, 122, :_reduce_86,
  3, 123, :_reduce_87,
  3, 123, :_reduce_88,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  4, 125, :_reduce_91,
  1, 113, :_reduce_92,
  3, 113, :_reduce_93,
  0, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 111, :_reduce_96,
  1, 106, :_reduce_97,
  1, 107, :_reduce_98,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 81, :_reduce_106,
  3, 81, :_reduce_107,
  3, 91, :_reduce_108,
  0, 115, :_reduce_109,
  1, 115, :_reduce_110,
  3, 115, :_reduce_111,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 128, :_reduce_115,
  3, 130, :_reduce_116,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  0, 117, :_reduce_119,
  1, 117, :_reduce_120,
  3, 117, :_reduce_121,
  4, 110, :_reduce_122,
  3, 110, :_reduce_123,
  1, 98, :_reduce_124,
  2, 98, :_reduce_125,
  2, 132, :_reduce_126,
  1, 133, :_reduce_127,
  2, 133, :_reduce_128,
  1, 108, :_reduce_129,
  4, 96, :_reduce_130,
  4, 96, :_reduce_131,
  5, 84, :_reduce_132,
  4, 84, :_reduce_133,
  2, 83, :_reduce_134,
  5, 134, :_reduce_135,
  4, 134, :_reduce_136,
  0, 135, :_reduce_none,
  2, 135, :_reduce_138,
  4, 135, :_reduce_139,
  3, 135, :_reduce_140,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  3, 104, :_reduce_143,
  3, 104, :_reduce_144,
  3, 104, :_reduce_145,
  3, 104, :_reduce_146,
  3, 104, :_reduce_147,
  3, 104, :_reduce_148,
  3, 104, :_reduce_149,
  3, 104, :_reduce_150,
  3, 104, :_reduce_151,
  3, 104, :_reduce_152,
  2, 104, :_reduce_153,
  3, 104, :_reduce_154,
  3, 104, :_reduce_155,
  3, 104, :_reduce_156,
  3, 104, :_reduce_157,
  3, 104, :_reduce_158,
  3, 104, :_reduce_159,
  2, 104, :_reduce_160,
  3, 104, :_reduce_161,
  3, 104, :_reduce_162,
  3, 104, :_reduce_163,
  5, 82, :_reduce_164,
  1, 138, :_reduce_165,
  2, 138, :_reduce_166,
  5, 139, :_reduce_167,
  4, 139, :_reduce_168,
  1, 140, :_reduce_169,
  3, 140, :_reduce_170,
  3, 99, :_reduce_171,
  1, 142, :_reduce_none,
  4, 142, :_reduce_173,
  1, 144, :_reduce_none,
  3, 144, :_reduce_175,
  3, 143, :_reduce_176,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_185,
  1, 141, :_reduce_none,
  1, 145, :_reduce_187,
  1, 146, :_reduce_none,
  3, 146, :_reduce_189,
  2, 85, :_reduce_190,
  7, 87, :_reduce_191,
  6, 87, :_reduce_192,
  7, 88, :_reduce_193,
  6, 88, :_reduce_194,
  6, 89, :_reduce_195,
  5, 89, :_reduce_196,
  1, 112, :_reduce_197,
  1, 112, :_reduce_198,
  1, 150, :_reduce_199,
  3, 150, :_reduce_200,
  1, 152, :_reduce_201,
  1, 153, :_reduce_202,
  1, 153, :_reduce_203,
  1, 153, :_reduce_204,
  1, 153, :_reduce_none,
  0, 75, :_reduce_206,
  0, 154, :_reduce_207,
  1, 147, :_reduce_none,
  3, 147, :_reduce_209,
  4, 147, :_reduce_210,
  1, 155, :_reduce_none,
  3, 155, :_reduce_212,
  3, 156, :_reduce_213,
  1, 156, :_reduce_214,
  3, 148, :_reduce_215,
  3, 148, :_reduce_216,
  1, 151, :_reduce_none,
  2, 151, :_reduce_218,
  1, 149, :_reduce_none,
  2, 149, :_reduce_220,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 97, :_reduce_223,
  3, 109, :_reduce_224,
  4, 109, :_reduce_225,
  2, 109, :_reduce_226,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  0, 116, :_reduce_none,
  1, 116, :_reduce_230,
  1, 137, :_reduce_231,
  3, 136, :_reduce_232,
  4, 136, :_reduce_233,
  2, 136, :_reduce_234,
  1, 158, :_reduce_none,
  3, 158, :_reduce_236,
  3, 159, :_reduce_237,
  1, 160, :_reduce_238,
  1, 160, :_reduce_239,
  4, 127, :_reduce_240,
  1, 100, :_reduce_none,
  4, 100, :_reduce_242 ]

racc_reduce_n = 243

racc_shift_n = 408

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :MODULO => 69,
  :PRODUCES => 70,
  :CONSUMES => 71 }

racc_nt_base = 72

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "MODULO",
  "PRODUCES",
  "CONSUMES",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "capability",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::BlockExpression, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 157)
  def _reduce_69(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 160)
  def _reduce_70(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 163)
  def _reduce_71(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 170)
  def _reduce_72(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_73(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 193)
  def _reduce_74(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_76(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 217)
  def _reduce_77(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 235)
  def _reduce_78(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 243)
  def _reduce_79(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'grammar.ra', 256)
  def _reduce_82(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'grammar.ra', 261)
  def _reduce_84(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 265)
  def _reduce_85(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_87(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 274)
  def _reduce_88(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_91(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 286)
  def _reduce_92(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_93(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 296)
  def _reduce_96(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 300)
  def _reduce_97(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 304)
  def _reduce_98(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_106(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 322)
  def _reduce_107(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_108(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 332)
  def _reduce_109(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 334)
  def _reduce_110(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 336)
  def _reduce_111(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_115(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 349)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_119(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_120(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_121(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 368)
  def _reduce_122(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 373)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 379)
  def _reduce_124(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_125(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_126(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_127(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 388)
  def _reduce_129(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 392)
  def _reduce_130(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 395)
  def _reduce_131(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 399)
  def _reduce_132(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_133(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 417)
  def _reduce_134(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 421)
  def _reduce_135(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_136(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 445)
  def _reduce_138(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 448)
  def _reduce_139(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 452)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'grammar.ra', 471)
  def _reduce_143(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 474)
  def _reduce_144(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 477)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_146(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 483)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 486)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 492)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 495)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 498)
  def _reduce_152(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 501)
  def _reduce_153(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 504)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 507)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 510)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 513)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 516)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_159(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 522)
  def _reduce_160(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 525)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 528)
  def _reduce_162(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 531)
  def _reduce_163(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 535)
  def _reduce_164(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_165(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_166(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_167(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 549)
  def _reduce_168(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::BlockExpression)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 559)
  def _reduce_169(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_170(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_171(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'grammar.ra', 571)
  def _reduce_173(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'grammar.ra', 577)
  def _reduce_175(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 586)
  def _reduce_176(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'grammar.ra', 598)
  def _reduce_185(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 603)
  def _reduce_187(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'grammar.ra', 605)
  def _reduce_189(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 608)
  def _reduce_190(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 618)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[5],
                                                                       :line => val[0][:line]))

  if hash = val[3]
    result.set_capability(hash)
  end
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 630)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  if hash = val[3]
    result.set_capability(hash)
  end
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 648)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 657)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 662)
  def _reduce_196(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 666)
  def _reduce_197(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 667)
  def _reduce_198(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 672)
  def _reduce_199(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 675)
  def _reduce_200(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 680)
  def _reduce_201(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 683)
  def _reduce_202(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 684)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 685)
  def _reduce_204(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 205 omitted

module_eval(<<'.,.,', 'grammar.ra', 689)
  def _reduce_206(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 693)
  def _reduce_207(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 698)
  def _reduce_209(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 701)
  def _reduce_210(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_212(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_213(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 714)
  def _reduce_214(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 717)
  def _reduce_215(val, _values, result)
      result = {:name => val[1].value, :values => val[2], :type => :produces}

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 720)
  def _reduce_216(val, _values, result)
      result = {:name => val[1].value, :values => val[2], :type => :consumes}

    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_218(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 219 omitted

module_eval(<<'.,.,', 'grammar.ra', 730)
  def _reduce_220(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 221 omitted

# reduce 222 omitted

module_eval(<<'.,.,', 'grammar.ra', 736)
  def _reduce_223(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 739)
  def _reduce_224(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 740)
  def _reduce_225(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 741)
  def _reduce_226(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

module_eval(<<'.,.,', 'grammar.ra', 747)
  def _reduce_230(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 750)
  def _reduce_231(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 754)
  def _reduce_232(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 761)
  def _reduce_233(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 767)
  def _reduce_234(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 235 omitted

module_eval(<<'.,.,', 'grammar.ra', 772)
  def _reduce_236(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 781)
  def _reduce_237(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 784)
  def _reduce_238(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 785)
  def _reduce_239(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 788)
  def _reduce_240(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 241 omitted

module_eval(<<'.,.,', 'grammar.ra', 793)
  def _reduce_242(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
